const axios = require("axios");
const fs = require("fs");
const path = require("path");

module.exports.config = {
  name: "owner",
  version: "1.1.0",
  permission: 0,
  credits: "AJ/ARI",
  description: "Display bot owner info with multiple videos",
  category: "info",
  usages: "/owner",
  cooldowns: 5
};

module.exports.run = async function ({ api, event }) {
  const videoUrls = [
    "https://files.catbox.moe/eksnob.mp4",
    "https://files.catbox.moe/l27lu3.mp4",
    "https://files.catbox.moe/4sh4f2.mp4",
    "https://files.catbox.moe/af5o24.mp4",
    "https://files.catbox.moe/i1sfb7.mp4",
    "https://files.catbox.moe/tiygtc.mp4",
    "https://files.catbox.moe/pxn6ri.mp4",
    "https://files.catbox.moe/93flm8.mp4",
    "https://files.catbox.moe/ogjrsp.mp4",
    "https://files.catbox.moe/c7iby8.mp4",
    "https://files.catbox.moe/9x5sy4.mp4"
  ];

  const videoPaths = [];

  try {
    // Download all videos
    for (let i = 0; i < videoUrls.length; i++) {
      const videoUrl = videoUrls[i];
      const filePath = path.join(__dirname, "cache", `owner_video_${i}.mp4`);
      const response = await axios({ url: videoUrl, method: "GET", responseType: "stream" });

      await new Promise((resolve, reject) => {
        const writer = fs.createWriteStream(filePath);
        response.data.pipe(writer);
        writer.on("finish", resolve);
        writer.on("error", reject);
      });

      videoPaths.push(filePath);
    }

    // Create attachment array
    const attachments = videoPaths.map((file) => fs.createReadStream(file));

    // Send message
    const message = {
      body: `
      üëë ùóïùó¢ùóß ùó¢ùó™ùó°ùóòùó• ùóúùó°ùóôùó¢ üëë   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 
üßë‚Äçüîß ùó°ùóîùó†ùóò: ·¥Ä Ä…™  
üìé ùóîùóöùóò: 18 
üßçùóöùóòùó°ùóóùóòùó•: ·¥ç·¥Ä ü·¥á  
‚öôÔ∏è ùó•ùó¢ùóüùóò:  ü·¥á·¥Ä·¥Ö ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä ·¥èÍú∞ ·¥Ä·¥ú·¥õ·¥è ô·¥è·¥õ 
ü§ñ ùóïùó¢ùóß ùó©ùóòùó•ùó¶ùóúùó¢ùó°: 1.0 
üí¨ ùó°ùó¢ùóßùóò: …™'·¥ç ·¥è·¥ò·¥á…¥ ·¥õ·¥è Íú±·¥ú…¢…¢·¥áÍú±·¥õ…™·¥è…¥Íú± ·¥Ä…¥·¥Ö …™·¥ç·¥ò Ä·¥è·¥†·¥á·¥ç·¥á…¥·¥õÍú±, ·¥ò·¥ç ·¥ç·¥á Íú∞·¥è Ä  ú·¥á ü·¥ò ·¥è Ä  ô·¥è·¥õ ·¥Ñ·¥è ü ü·¥Ä ô·¥è Ä·¥Ä·¥õ…™·¥è…¥ . ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìΩ Sending multiple video files...`,
      attachment: attachments
    };

    api.sendMessage(message, event.threadID, () => {
      // Delete all videos after sending
      videoPaths.forEach((file) => fs.unlinkSync(file));
    }, event.messageID);
  } catch (error) {
    console.error("‚ùå Error downloading videos:", error);
    api.sendMessage("‚ùå Failed to send videos. Please check the video links or try again later.", event.threadID, event.messageID);
  }
};
